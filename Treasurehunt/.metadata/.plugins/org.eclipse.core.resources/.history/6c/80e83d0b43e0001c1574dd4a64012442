package Treasurehunt;

// 공격 기능 없음
// 단순 적 피하기

import java.util.Random;

import java.util.Timer;
import java.util.TimerTask;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

public class Game extends JFrame {
	Container c = getContentPane();
	
	// 적이 없어졌는지 체크
	boolean Check1 = true;
	boolean Check2 = true;
	boolean Check3 = true;
	
	// 보물상자
	JLabel treasure = new JLabel();
	
	// 플레이어
	JLabel player = new JLabel();
	public int x = 140, y = 600;
	private final int FLYING_UNIT = 10;

	// 공격
	JLabel Attack = new JLabel();
	int ax;
	int ay;
	boolean b = false;

	// 레벨
	int Levellb = 1;
	JLabel Levellb1 = new JLabel("1");
	JLabel Levellb2 = new JLabel("2");
	JLabel Levellb3 = new JLabel("3");

	// 적
	int enemy1move;
	int enemy2mov;
	int enemy3move;
	
	int[] ranX = { 0, 0, 0};
	int[] ranY = { 0, 0, 0};
	
	JLabel enemy1 = new JLabel();
	JLabel enemy2 = new JLabel();
	JLabel enemy3 = new JLabel();
	JLabel enemy4 = new JLabel();
	JLabel enemy5 = new JLabel();

	// 타임
	int count = 0;
	int enTime = 0;
	public int ranY(int[] ranY, int index) {
		for (int i = 0; i < ranY.length; i++) {
			for (int j = 1; j < ranY.length; j++) {
				ranY[i] = (int) (Math.random() * 601) + 200;
				if (ranY[i] == ranY[j]) {
					ranY[j] = (int) (Math.random() * 601) + 200;
				}
			}
		}

		return ranY[index];
	}

	public int ranX(int[] ranX, int index) {
		for (int i = 0; i < ranX.length; i++) {
			for (int j = 1; j < ranX.length; j++) {
				ranX[i] = (int) (Math.random() * 801) + 200;
				if (ranX[i] == ranX[j]) {
					ranX[j] = (int) (Math.random() * 801) + 200;
				}
			}
		}

		return ranY[index];
	}
	
	Game() {
		c.setLayout(null);
	
		enemy1move = ranY(ranY, 0);
		enemy2move = ranY(ranY, 1);
		enemy3move = ranY(ranY, 2);
		
		// 플레이어
		ImageIcon pl = new ImageIcon("img\\player1.png");
		Image pla = pl.getImage();
		Image play = pla.getScaledInstance(80, 80, Image.SCALE_SMOOTH);
		ImageIcon playe = new ImageIcon(play);

		player = new JLabel(playe);
		player.setBounds(140, 600, 80, 80);
		addKeyListener(new getkey());
		c.add(player);
		
		
		// 보물상자
		ImageIcon tr = new ImageIcon("img\\treasure1.png");
		Image tre = tr.getImage();
		Image trea = tre.getScaledInstance(90, 90, Image.SCALE_SMOOTH);
		ImageIcon treas = new ImageIcon(trea);

		treasure = new JLabel(treas);
		treasure.setBounds(960, 20, 90, 90);
		c.add(treasure);	
		
		// 공격
		ImageIcon a = new ImageIcon("img\\bg2.png");
		Image at = a.getImage();
		Image att = at.getScaledInstance(20, 20, Image.SCALE_SMOOTH);
		ImageIcon atta = new ImageIcon(att);

		Attack = new JLabel(atta);
		c.add(Attack);
		Attack.setVisible(false);

		// 적 1
		ImageIcon e = new ImageIcon("img\\Enemy.png");
		Image en = e.getImage();
		Image ene = en.getScaledInstance(80, 80, Image.SCALE_SMOOTH);
		ImageIcon enem = new ImageIcon(ene);

		enemy1 = new JLabel(enem);
		enemy1.setBounds(ranX(ranX, 0), ranY(ranY, 0), 80, 80);
		c.add(enemy1);

		// 적 2
		ImageIcon e2 = new ImageIcon("img\\Enemy.png");
		Image en2 = e2.getImage();
		Image ene2 = en2.getScaledInstance(80, 80, Image.SCALE_SMOOTH);
		ImageIcon enem2 = new ImageIcon(ene2);

		enemy2 = new JLabel(enem2);
		enemy2.setBounds(ranX(ranX, 0), ranY(ranY, 0), 80, 80);
		c.add(enemy2);

		// 적 3
		ImageIcon e3 = new ImageIcon("img\\Enemy.png");
		Image en3 = e3.getImage();
		Image ene3 = en3.getScaledInstance(80, 80, Image.SCALE_SMOOTH);
		ImageIcon enem3 = new ImageIcon(ene3);

		enemy3 = new JLabel(enem3);
		enemy3.setBounds(ranX(ranX, 0), ranY(ranY, 0), 80, 80);
		c.add(enemy3);

		// 레벨
		Levellb1.setBounds(10, 10, 20, 20);
		c.add(Levellb1);

		Levellb2.setBounds(10, 10, 20, 20);
		c.add(Levellb2);
		Levellb2.setVisible(false);

		Levellb3.setBounds(20, 20, 20, 20);
		c.add(Levellb3);
		Levellb3.setVisible(false);

		Background bg = new Background();
		bg.Background(c);
		
		Timer m = new Timer();
		TimerTask task = new TimerTask() {
			public void run() {
				if (count > 180) {
					Levellb++;
					Levellb1.setVisible(false);
					Levellb2.setVisible(true);
				}
				if (count > 300) {
					Levellb++;
					Levellb2.setVisible(false);
					Levellb3.setVisible(true);
				}
				count++;
			}
		};
		m.schedule(task, 1000, 1000); // 1초 뒤에 1초마다 run 메소드 수행

		
		// 적, 공격
		Timer n = new Timer();
		TimerTask t = new TimerTask() {
			public void run() {
				
				if (b == true) {
					Attack.setBounds(ax, ay, 20, 20);
					ay -= 10;
					Attack.setLocation(ax, ay);
					Attack.setVisible(true);

					// ax- 40 오른쪽
					if ((ay > enemy1.getY() - 55 && ay < enemy1.getY() + 55 
							&& ax - 30 > enemy1.getX() - 55 && ax < enemy1.getX() + 55)) {
						enemy1.setVisible(false);
						Check1 = false;
					}
					if((ay > enemy2.getY() - 55 && ay < enemy2.getY() + 55 
							&& ax - 30 > enemy2.getX() - 55 && ax < enemy2.getX() + 55)) {
						enemy2.setVisible(false);
						Check2 = false;
					}
					if((ay > enemy3.getY() - 55 && ay < enemy3.getY() + 55 
							&& ax - 30 > enemy3.getX() - 55 && ax < enemy3.getX() + 55)) {
						enemy3.setVisible(false);
						Check3 = false;
					}
				} 
				if (Levellb == 1) {
					if (enTime < 15) {
						enemy1move += 10;
						enemy1.setLocation(enemy1move, 150);

						enemy2move -= 10;
						enemy2.setLocation(enemy2move, 300);

						enemy3move += 10;
						enemy3.setLocation(enemy3move, 400);

					} else if (enTime < 30) {
						enemy1move -= 10;
						enemy1.setLocation(enemy1move, 150);

						enemy2move += 10;
						enemy2.setLocation(enemy2move, 300);

						enemy3move -= 10;
						enemy3.setLocation(enemy3move, 400);

						if (enTime == 29)
							enTime = 0;
					}
					enTime++;
				}
				// 적 부딪힘
				if ((y > enemy1.getY() - 75 && y < enemy1.getY() + 75 
						&& x > enemy1.getX() - 60 && x < enemy1.getX() + 60)) {
					if(Check1 == true) {
						new Failed();
						setVisible(false);
						try {
			                Thread.sleep(1000000000);
			            } catch (InterruptedException e) {
			                e.printStackTrace();
			            }
					}
				}
				if((y > enemy2.getY() - 75 && y < enemy2.getY() + 75 
						&& x > enemy2.getX() - 60 && x < enemy2.getX() + 60)) {
					if(Check2 == true) {
						new Failed();
						setVisible(false);
						try {
			                Thread.sleep(1000000000);
			            } catch (InterruptedException e) {
			                e.printStackTrace();
			            }
					}
				}
				if((y > enemy3.getY() - 75 && y < enemy3.getY() + 75 
						&& x > enemy3.getX() - 60 && x < enemy3.getX() + 60)) {
					if(Check3 == true) {
						new Failed();
						setVisible(false);
						try {
			                Thread.sleep(1000000000);
			            } catch (InterruptedException e) {
			                e.printStackTrace();
			            }
					}
				}
			}
		};
		n.schedule(t, 100, 100); // 1초 뒤에 1초마다 run 메소드 수행
		

		// 창
		setSize(1200, 800);
		setVisible(true);
		setLocationRelativeTo(null); // 창 가운데 배치
		setResizable(false); // 창 크기 고정

		// 종료시 완전 히 끔
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

	class getkey extends KeyAdapter {
		public void keyPressed(KeyEvent e) {
			
			int keyCode = e.getKeyCode();
			switch (keyCode) {

			case KeyEvent.VK_SPACE:
				b = true;
				ax = player.getX() + 15;
				ay = player.getY();
				
				if ((y - 30 > treasure.getY() - 65 && y < treasure.getY() + 65 
						&& x - 30 > treasure.getX() - 65 && x < treasure.getX() + 65)) {
					new Pass();
					setVisible(false);
				}
					
				break;

			// up , w -> 플레이어 위로 이동
			case KeyEvent.VK_UP:
			case KeyEvent.VK_W:
				if (y == 70)
					// || player.getY() > wall.wall(c).getY()
					break;
				else {
					y = player.getY() - FLYING_UNIT;
					player.setLocation(player.getX(), y);
					break;
				}

				// down , s -> 플레이어 아래로 이동
			case KeyEvent.VK_DOWN:
			case KeyEvent.VK_S:
				if (y == 610)
					break;
				else {
					y = player.getY() + FLYING_UNIT;
					player.setLocation(player.getX(), y);
					break;
				}

				// left , a -> 플레이어 왼쪽로 이동
			case KeyEvent.VK_LEFT:
			case KeyEvent.VK_A:
				if (x == 50)
					break;
				else {
					x = player.getX() - FLYING_UNIT;
					player.setLocation(x, player.getY());
					break;
				}

				// right , d -> 플레이어 오른로 이동
			case KeyEvent.VK_RIGHT:
			case KeyEvent.VK_D:
				if (x == 1050)
					break;
				else {
					x = player.getX() + FLYING_UNIT;
					player.setLocation(x, player.getY());
					break;
				}
			}
		}
	}

}
